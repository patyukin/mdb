// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	parser "github.com/patyukin/mdb/internal/compute/parser"
	mock "github.com/stretchr/testify/mock"
)

// FMS is an autogenerated mock type for the FMS type
type FMS struct {
	mock.Mock
}

// Parse provides a mock function with given fields:
func (_m *FMS) Parse() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// consumeToken provides a mock function with given fields:
func (_m *FMS) consumeToken() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for consumeToken")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// next provides a mock function with given fields:
func (_m *FMS) next() rune {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for next")
	}

	var r0 rune
	if rf, ok := ret.Get(0).(func() rune); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(rune)
	}

	return r0
}

// peek provides a mock function with given fields:
func (_m *FMS) peek() rune {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for peek")
	}

	var r0 rune
	if rf, ok := ret.Get(0).(func() rune); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(rune)
	}

	return r0
}

// skipWhitespace provides a mock function with given fields:
func (_m *FMS) skipWhitespace() {
	_m.Called()
}

// stateAction provides a mock function with given fields:
func (_m *FMS) stateAction() parser.StateFn {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for stateAction")
	}

	var r0 parser.StateFn
	if rf, ok := ret.Get(0).(func() parser.StateFn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(parser.StateFn)
		}
	}

	return r0
}

// NewFMS creates a new instance of FMS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFMS(t interface {
	mock.TestingT
	Cleanup(func())
}) *FMS {
	mock := &FMS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
